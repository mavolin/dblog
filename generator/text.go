package generator

import (
	"strings"

	"github.com/mavolin/dblog/generator/file"
	"github.com/mavolin/dblog/logger"
)

// I know I could've used a template, and in fact at first I did.
// But things got confusing quickly, so this seems to be the better solution.

// genText generates the text for the generated file.
func (g *Generator) genText(pkg, typeName string, ms []file.Method) (string, error) {
	var b strings.Builder

	// package
	b.WriteString("package ")
	b.WriteString(pkg)
	b.WriteString("\n\n")

	// imports
	b.WriteString("import (\n")
	for name, path := range g.ImportManager.Imports {
		b.WriteString("\t")
		b.WriteString(name)
		b.WriteString(" \"")
		b.WriteString(path)
		b.WriteString("\"\n")
	}
	b.WriteString(")\n\n")

	b.WriteString("// Code generated by github.com/mavolin/dblog. DO NOT EDIT.\n\n")

	// wrapper type
	b.WriteString("type ")
	b.WriteString(typeName)
	b.WriteString(" struct {\n")
	//
	b.WriteString("\t repo ")
	b.WriteString(g.ifaceName)
	b.WriteString("\n")
	//
	b.WriteString("}\n\n")

	b.WriteString("var _ ")
	b.WriteString(g.ifaceName)
	b.WriteString(" = (*")
	b.WriteString(typeName)
	b.WriteString(")(nil)\n\n")

	// wrapper constructor
	b.WriteString("func New")
	b.WriteString(typeName)
	b.WriteString("(repo ")
	b.WriteString(g.ifaceName)
	b.WriteString(") *")
	b.WriteString(typeName)
	b.WriteString(" {\n")
	//
	b.WriteString("\treturn &")
	b.WriteString(typeName)
	b.WriteString("{repo: repo}\n")
	//
	b.WriteString("}\n\n")

	// methods
	for _, m := range ms {
		// use double __ to avoid collisions with idents following Uber's style guide
		b.WriteString("func (__w *")
		b.WriteString(typeName)
		b.WriteString(") ")
		b.WriteString(m.Name)
		b.WriteString("(")
		for j, p := range m.Params {
			if j > 0 {
				b.WriteString(", ")
			}
			b.WriteString(p.Name)
			b.WriteString(" ")
			b.WriteString(p.Type.String())
		}
		b.WriteString(") (")
		for j, r := range m.Returns {
			if j > 0 {
				b.WriteString(", ")
			}
			b.WriteString(r.Name)
			b.WriteString(" ")
			b.WriteString(r.Type.String())
		}
		b.WriteString(") {\n")
		{
			// pre request logging
			for _, l := range g.Loggers {
				pl, ok := l.(logger.PreRequestLogger)
				if !ok {
					continue
				}

				code, err := pl.LogPreRequest(m)
				if err != nil {
					return "", err
				}
				b.WriteString(code)
				b.WriteString("\n\n")
			}

			// make request
			if len(m.Returns) > 0 {
				for j, r := range m.Returns {
					if j > 0 {
						b.WriteString(", ")
					}

					b.WriteString(r.Name)
				}

				b.WriteString(" = ")
			}
			b.WriteString("__w.repo.")
			b.WriteString(m.Name)
			b.WriteString("(")
			for j, p := range m.Params {
				if j > 0 {
					b.WriteString(", ")
				}
				b.WriteString(p.Name)
			}
			b.WriteString(")\n\n")

			// post request logging
			for _, l := range g.Loggers {
				pl, ok := l.(logger.PostRequestLogger)
				if !ok {
					continue
				}

				code, err := pl.LogPostRequest(m)
				if err != nil {
					return "", err
				}
				b.WriteString(code)
				b.WriteString("\n\n")
			}

			if len(m.Returns) > 0 && m.Returns[len(m.Returns)-1].Type.String() == "error" {
				errRet := m.Returns[len(m.Returns)-1]
				// error loggers
				b.WriteString("if ")
				b.WriteString(errRet.Name)
				b.WriteString(" != nil {\n")
				//
				for _, l := range g.Loggers {
					el, ok := l.(logger.ErrorLogger)
					if !ok {
						continue
					}

					code, err := el.LogError(m)
					if err != nil {
						return "", err
					}
					b.WriteString(code)
					b.WriteString("\n\n")
				}
				b.WriteString("} else {\n")

				// success loggers
				for _, l := range g.Loggers {
					sl, ok := l.(logger.SuccessLogger)
					if !ok {
						continue
					}

					code, err := sl.LogSuccess(m)
					if err != nil {
						return "", err
					}
					b.WriteString(code)
					b.WriteString("\n\n")
				}

				b.WriteString("}\n")
			} else {
				// success loggers
				for _, l := range g.Loggers {
					sl, ok := l.(logger.SuccessLogger)
					if !ok {
						continue
					}

					code, err := sl.LogSuccess(m)
					if err != nil {
						return "", err
					}
					b.WriteString(code)
					b.WriteString("\n\n")
				}
			}

			// return
			b.WriteString("\treturn\n") // naked return
		}
		b.WriteString("}\n\n")
	}

	return b.String(), nil
}
